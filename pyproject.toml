[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "scrapy-cloud-browser"
version = "0.1.1"
description = "A Scrapy extension that integrates with https://surfsky.io"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
keywords = []
authors = [
  { name = "Surfsky.io", email = "hello@surfsky.io" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
dependencies = [
  "httpx",
  "pydantic>=2.10",
  "websockets",
  "scrapy~=2.12.0",
  "anyio",
]

[project.urls]
Documentation = "https://github.com/cloudbrowser/scrapy-cloud-browser#readme"
Issues = "https://github.com/cloudbrowser/scrapy-cloud-browser/issues"
Source = "https://github.com/cloudbrowser/scrapy-cloud-browser"
"Homepage" = "https://github.com/cloudbrowser/scrapy-cloud-browser"
"Bug Tracker" = "https://github.com/cloudbrowser/scrapy-cloud-browser/issues"

[project.scripts]
# your-command = "your_package.module:function"

[tool.hatch.version]
path = "scrapy_cloud_browser/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:scrapy_cloud_browser tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ['py312']
line-length = 100
skip-string-normalization = true

[tool.isort]
combine_as_imports = true
default_section = 'THIRDPARTY'
force_alphabetical_sort_within_sections = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 100
lines_after_imports = 2
multi_line_output = 3
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'OWN', 'FIRSTPARTY', 'LOCALFOLDER']

known_first_party = ''
known_own = ['scrapy_cloud_browser']

[tool.ruff]
target-version = "py312"
line-length = 100
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # other
  "EM101", "S311", "RUF100",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["scrapy_cloud_browser"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "single"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["scrapy_cloud_browser", "tests"]
branch = true
parallel = true
omit = [
  "scrapy_cloud_browser/__about__.py",
]

[tool.coverage.paths]
scrapy_cloud_browser = ["scrapy_cloud_browser", "*/scrapy-cloud-browser/scrapy_cloud_browser"]
tests = ["tests", "*/scrapy-cloud-browser/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
